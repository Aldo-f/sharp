(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{246:function(t,a,s){"use strict";s.r(a);var n=s(2),e=Object(n.a)({},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"building-an-entity-form"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#building-an-entity-form","aria-hidden":"true"}},[t._v("#")]),t._v(" Building an Entity Form")]),t._v(" "),s("p",[t._v("Sharp is mostly made of Entity Lists to display, search, filter, act on instances, and of Entity Forms to create or update entities.")]),t._v(" "),s("h2",{attrs:{id:"generator"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#generator","aria-hidden":"true"}},[t._v("#")]),t._v(" Generator")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("php artisan sharp:make:form "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("class_name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--model"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("model_name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("h2",{attrs:{id:"write-the-class"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#write-the-class","aria-hidden":"true"}},[t._v("#")]),t._v(" Write the class")]),t._v(" "),s("p",[t._v("As usual in Sharp, we begin by creating a class dedicated to our Entity Form and make it extend "),s("code",{staticClass:"inline"},[t._v("Code16\\"),s("span",{staticClass:"token package"},[t._v("Sharp"),s("span",{staticClass:"token punctuation"},[t._v("\\")]),t._v("Form"),s("span",{staticClass:"token punctuation"},[t._v("\\")]),t._v("SharpForm")])]),t._v("; and we'll have to implement at least 5 functions:")]),t._v(" "),s("ul",[s("li",[s("code",{staticClass:"inline"},[s("span",{staticClass:"token function"},[t._v("buildFormFields")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token punctuation"},[t._v(")")])]),t._v(" and "),s("code",{staticClass:"inline"},[s("span",{staticClass:"token function"},[t._v("buildFormLayout")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token punctuation"},[t._v(")")])]),t._v(" to build and configure the form itself,")]),t._v(" "),s("li",[s("code",{staticClass:"inline"},[s("span",{staticClass:"token function"},[t._v("find")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token variable"},[t._v("$id")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(":")]),t._v(" "),s("span",{staticClass:"token keyword"},[t._v("array")])]),t._v(" to get the instance data,")]),t._v(" "),s("li",[s("code",{staticClass:"inline"},[s("span",{staticClass:"token function"},[t._v("update")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token variable"},[t._v("$id")]),s("span",{staticClass:"token punctuation"},[t._v(",")]),t._v(" "),s("span",{staticClass:"token keyword"},[t._v("array")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("$data")]),s("span",{staticClass:"token punctuation"},[t._v(")")])]),t._v(" to update the instance,")]),t._v(" "),s("li",[s("code",{staticClass:"inline"},[s("span",{staticClass:"token function"},[t._v("delete")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token variable"},[t._v("$id")]),s("span",{staticClass:"token punctuation"},[t._v(")")])]),t._v(" to... delete the instance.")])]),t._v(" "),s("p",[t._v("Let's see the specifics:")]),t._v(" "),s("h3",{attrs:{id:"buildformfields"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#buildformfields","aria-hidden":"true"}},[t._v("#")]),t._v(" "),s("code",{staticClass:"inline"},[s("span",{staticClass:"token function"},[t._v("buildFormFields")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token punctuation"},[t._v(")")])])]),t._v(" "),s("p",[t._v("In short, this method is meant to host the code responsible for the declaration and configuration of each form field. This must be done calling "),s("code",{staticClass:"inline"},[s("span",{staticClass:"token variable"},[t._v("$this")]),s("span",{staticClass:"token operator"},[t._v("-")]),s("span",{staticClass:"token operator"},[t._v(">")]),s("span",{staticClass:"token property"},[t._v("addField")])]),t._v(":")]),t._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("buildFormFields")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$this")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addField")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        SharpFormTextField"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("make")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[t._v('"name"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setLabel")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[t._v('"Name"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addField")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        SharpFormTextField"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("make")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[t._v('"capacity"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setLabel")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[t._v('"Capacity (x1000)"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("As we can see in this simple example, we defined two text fields giving them a mandatory "),s("code",{staticClass:"inline"},[t._v("key")]),t._v(" and an optional label.")]),t._v(" "),s("h4",{attrs:{id:"form-fields-shared-attributes"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#form-fields-shared-attributes","aria-hidden":"true"}},[t._v("#")]),t._v(" Form fields shared attributes")]),t._v(" "),s("p",[t._v("Every field has the optional following setters:")]),t._v(" "),s("ul",[s("li",[s("code",{staticClass:"inline"},[s("span",{staticClass:"token function"},[t._v("setLabel")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),t._v("string "),s("span",{staticClass:"token variable"},[t._v("$label")]),s("span",{staticClass:"token punctuation"},[t._v(")")])]),t._v(" for the field label displayed above it")]),t._v(" "),s("li",[s("code",{staticClass:"inline"},[s("span",{staticClass:"token function"},[t._v("setHelpMessage")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),t._v("string "),s("span",{staticClass:"token variable"},[t._v("$helpMessage")]),s("span",{staticClass:"token punctuation"},[t._v(")")])]),t._v(" to add a help text below the field")]),t._v(" "),s("li",[s("code",{staticClass:"inline"},[s("span",{staticClass:"token function"},[t._v("setReadOnly")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),t._v("bool "),s("span",{staticClass:"token variable"},[t._v("$readOnly")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" "),s("span",{staticClass:"token boolean constant"},[t._v("true")]),s("span",{staticClass:"token punctuation"},[t._v(")")])])]),t._v(" "),s("li",[s("code",{staticClass:"inline"},[s("span",{staticClass:"token function"},[t._v("setExtraStyle")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),t._v("string "),s("span",{staticClass:"token variable"},[t._v("$style")]),s("span",{staticClass:"token punctuation"},[t._v(")")])]),t._v(": the CSS style will be added in a "),s("code",{staticClass:"inline"},[t._v("style")]),t._v(" attribute")])]),t._v(" "),s("p",[t._v("In addition, all text fields have one more generic setter:")]),t._v(" "),s("ul",[s("li",[s("code",{staticClass:"inline"},[s("span",{staticClass:"token function"},[t._v("setPlaceholder")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),t._v("string "),s("span",{staticClass:"token variable"},[t._v("$placeholder")]),s("span",{staticClass:"token punctuation"},[t._v(")")])])])]),t._v(" "),s("h4",{attrs:{id:"conditional-display"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#conditional-display","aria-hidden":"true"}},[t._v("#")]),t._v(" Conditional display")]),t._v(" "),s("p",[t._v('The idea is to hide or show a field depending of some other field value, called "master" in this relation. To do that, use the '),s("code",{staticClass:"inline"},[s("span",{staticClass:"token function"},[t._v("addConditionalDisplay")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),t._v("string "),s("span",{staticClass:"token variable"},[t._v("$fieldKey")]),s("span",{staticClass:"token punctuation"},[t._v(",")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("$values")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" "),s("span",{staticClass:"token boolean constant"},[t._v("true")]),s("span",{staticClass:"token punctuation"},[t._v(")")])]),t._v(" setter giving:")]),t._v(" "),s("ul",[s("li",[t._v("the master "),s("code",{staticClass:"inline"},[s("span",{staticClass:"token variable"},[t._v("$fieldKey")])]),t._v(", which should refer to either a Check, Select, Tags or Autocomplete field,")]),t._v(" "),s("li",[t._v("the "),s("code",{staticClass:"inline"},[s("span",{staticClass:"token variable"},[t._v("$values")])]),t._v(' of the master field for which the "slave" field must be visible. You can put there a boolean for a Check master field, and for other fields (Select, Tags, Autocomplete), either:\n'),s("ul",[s("li",[t._v("a string value, like for instance "),s("code",{staticClass:"inline"},[s("span",{staticClass:"token double-quoted-string string"},[t._v('"red"')])]),t._v(': the slave field is visible only when the master field value is "red"')]),t._v(" "),s("li",[t._v("a string value with a negation mark as the first char, like "),s("code",{staticClass:"inline"},[t._v('"'),s("span",{staticClass:"token operator"},[t._v("!")]),t._v("red")]),t._v('": the slave field is visible only when the master field value is NOT "red"')]),t._v(" "),s("li",[t._v("an array of values: "),s("code",{staticClass:"inline"},[s("span",{staticClass:"token punctuation"},[t._v("[")]),s("span",{staticClass:"token double-quoted-string string"},[t._v('"red"')]),s("span",{staticClass:"token punctuation"},[t._v(",")]),t._v(" "),s("span",{staticClass:"token double-quoted-string string"},[t._v('"blue"')]),s("span",{staticClass:"token punctuation"},[t._v("]")])]),t._v('. The slave field is visible only when the master field value is either "red" or "blue".')])])])]),t._v(" "),s("p",[t._v("You can add multiple conditional display rules, chaining calls to "),s("code",{staticClass:"inline"},[s("span",{staticClass:"token function"},[t._v("addConditionalDisplay")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),t._v("string "),s("span",{staticClass:"token variable"},[t._v("$fieldKey")]),s("span",{staticClass:"token punctuation"},[t._v(",")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("$values")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" "),s("span",{staticClass:"token boolean constant"},[t._v("true")]),s("span",{staticClass:"token punctuation"},[t._v(")")])]),t._v(". In this case, all conditions will be linked with a "),s("code",{staticClass:"inline"},[s("span",{staticClass:"token keyword"},[t._v("AND")])]),t._v(" operator by default (meaning all conditions must be verified to display the slave field), but this can be switch to an "),s("code",{staticClass:"inline"},[s("span",{staticClass:"token keyword"},[t._v("OR")])]),t._v(" easily with "),s("code",{staticClass:"inline"},[s("span",{staticClass:"token function"},[t._v("setConditionalDisplayOrOperator")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token punctuation"},[t._v(")")])]),t._v(" (and back with "),s("code",{staticClass:"inline"},[s("span",{staticClass:"token function"},[t._v("setConditionalDisplayAndOperator")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token punctuation"},[t._v(")")])]),t._v(").")]),t._v(" "),s("h4",{attrs:{id:"formatters"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#formatters","aria-hidden":"true"}},[t._v("#")]),t._v(" Formatters")]),t._v(" "),s("p",[t._v("Every field is linked to a Formatter, which defines the way data is formatted right before sending it to the front (last step, after transformers) and right after reception from the front (first step, before transformers).")]),t._v(" "),s("p",[t._v("Sharp provides a Formatter implementation per field type, but you can override this using the "),s("code",{staticClass:"inline"},[s("span",{staticClass:"token function"},[t._v("setFormatter")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token variable"},[t._v("$formatter")]),s("span",{staticClass:"token punctuation"},[t._v(")")])]),t._v(" setter, providing a "),s("code",{staticClass:"inline"},[t._v("Code16\\"),s("span",{staticClass:"token package"},[t._v("Sharp"),s("span",{staticClass:"token punctuation"},[t._v("\\")]),t._v("Form"),s("span",{staticClass:"token punctuation"},[t._v("\\")]),t._v("Fields"),s("span",{staticClass:"token punctuation"},[t._v("\\")]),t._v("Formatters"),s("span",{staticClass:"token punctuation"},[t._v("\\")]),t._v("SharpFieldFormatter")])]),t._v(" implementation.")]),t._v(" "),s("h4",{attrs:{id:"form-fields-specific-attributes"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#form-fields-specific-attributes","aria-hidden":"true"}},[t._v("#")]),t._v(" Form fields specific attributes")]),t._v(" "),s("p",[t._v("For the specifics of each field, here's the full list and documentation:")]),t._v(" "),s("ul",[s("li",[s("router-link",{attrs:{to:"/pages/form-fields/text.html"}},[t._v("Text")])],1),t._v(" "),s("li",[s("router-link",{attrs:{to:"/pages/form-fields/textarea.html"}},[t._v("Textarea")])],1),t._v(" "),s("li",[s("router-link",{attrs:{to:"/pages/form-fields/markdown.html"}},[t._v("Markdown")])],1),t._v(" "),s("li",[s("router-link",{attrs:{to:"/pages/form-fields/wysiwyg.html"}},[t._v("Wysiwyg")])],1),t._v(" "),s("li",[s("router-link",{attrs:{to:"/pages/form-fields/number.html"}},[t._v("Number")])],1),t._v(" "),s("li",[s("router-link",{attrs:{to:"/pages/form-fields/html.html"}},[t._v("Html")])],1),t._v(" "),s("li",[s("router-link",{attrs:{to:"/pages/form-fields/check.html"}},[t._v("Check")])],1),t._v(" "),s("li",[s("router-link",{attrs:{to:"/pages/form-fields/date.html"}},[t._v("Date")])],1),t._v(" "),s("li",[s("router-link",{attrs:{to:"/pages/form-fields/upload.html"}},[t._v("Upload")])],1),t._v(" "),s("li",[s("router-link",{attrs:{to:"/pages/form-fields/select.html"}},[t._v("Select")])],1),t._v(" "),s("li",[s("router-link",{attrs:{to:"/pages/form-fields/autocomplete.html"}},[t._v("Autocomplete")])],1),t._v(" "),s("li",[s("router-link",{attrs:{to:"/pages/form-fields/tags.html"}},[t._v("Tags")])],1),t._v(" "),s("li",[s("router-link",{attrs:{to:"/pages/form-fields/list.html"}},[t._v("List")])],1),t._v(" "),s("li",[s("router-link",{attrs:{to:"/pages/form-fields/autocomplete-list.html"}},[t._v("AutocompleteList")])],1),t._v(" "),s("li",[s("router-link",{attrs:{to:"/pages/form-fields/geolocation.html"}},[t._v("Geolocation")])],1)]),t._v(" "),s("h3",{attrs:{id:"buildformlayout"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#buildformlayout","aria-hidden":"true"}},[t._v("#")]),t._v(" "),s("code",{staticClass:"inline"},[s("span",{staticClass:"token function"},[t._v("buildFormLayout")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token punctuation"},[t._v(")")])])]),t._v(" "),s("p",[t._v("Now let's build the form layout. A form layout is made of "),s("code",{staticClass:"inline"},[t._v("columns")]),t._v(",  which contains "),s("code",{staticClass:"inline"},[t._v("fields")]),t._v(", "),s("code",{staticClass:"inline"},[t._v("lists")]),t._v(" of fields and "),s("code",{staticClass:"inline"},[t._v("fieldsets")]),t._v(". If needed, we can even define "),s("code",{staticClass:"inline"},[t._v("tabs")]),t._v(" above "),s("code",{staticClass:"inline"},[t._v("columns")]),t._v(".")]),t._v(" "),s("h4",{attrs:{id:"columns-and-fields"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#columns-and-fields","aria-hidden":"true"}},[t._v("#")]),t._v(" Columns and fields")]),t._v(" "),s("p",[t._v("Here's how we can define the layout for the simple two-fields form we built above:")]),t._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("buildFormLayout")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$this")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addColumn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("FormLayoutColumn "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$column")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$column")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("withSingleField")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[t._v('"name"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("withSingleField")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[t._v('"capacity"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("This will result in a 50% column (columns width are 12-based, like in Entity Lists) with the 2 fields in separate rows. Note that fields are referenced with their key, previously defined in "),s("code",{staticClass:"inline"},[s("span",{staticClass:"token function"},[t._v("buildFormFields")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token punctuation"},[t._v(")")])]),t._v(".")]),t._v(" "),s("p",[t._v("Here's another possible layout, with two unequally large columns:")]),t._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("buildFormLayout")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$this")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addColumn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("FormLayoutColumn "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$column")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$column")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("withSingleField")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[t._v('"name"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addColumn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("FormLayoutColumn "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$column")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$column")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("withSingleField")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[t._v('"capacity"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h5",{attrs:{id:"putting-fields-on-the-same-row"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#putting-fields-on-the-same-row","aria-hidden":"true"}},[t._v("#")]),t._v(" Putting fields on the same row")]),t._v(" "),s("p",[t._v("One final way is to put fields side by side on the same column:")]),t._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("buildFormLayout")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$this")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addColumn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("FormLayoutColumn "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$column")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$column")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("withFields")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[t._v('"name"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[t._v('"capacity"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("This will align the two fields on the row. They'll have the same width (50%), but we can act on this adding a special suffix:")]),t._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$column")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("withFields")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[t._v('"name|8"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[t._v('"capacity|4"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("Once again, it's a 12-based grid, so "),s("code",{staticClass:"inline"},[t._v("name")]),t._v(" will take 2/3 of the width, and "),s("code",{staticClass:"inline"},[t._v("capacity")]),t._v(" 1/3.")]),t._v(" "),s("h5",{attrs:{id:"a-word-on-smalll-screens"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#a-word-on-smalll-screens","aria-hidden":"true"}},[t._v("#")]),t._v(" A word on smalll screens")]),t._v(" "),s("p",[t._v("Columns are only used in medium to large screens (768 pixels and up).")]),t._v(" "),s("p",[t._v("Same for fields put on the same row: on smaller screens, they'll be placed on different rows, except if another layout is intentionally configured, using this convention:")]),t._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$column")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("withFields")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[t._v('"name|8,6"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[t._v('"capacity|4,6"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("Here, "),s("code",{staticClass:"inline"},[t._v("name")]),t._v(" will take 8/12 of the width on large screens, and 6/12 on smaller one.")]),t._v(" "),s("h4",{attrs:{id:"fieldsets"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fieldsets","aria-hidden":"true"}},[t._v("#")]),t._v(" Fieldsets")]),t._v(" "),s("p",[t._v("Fieldsets are useful to group some fields in a labelled block. Here's how they work:")]),t._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$this")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addColumn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("FormLayoutColumn "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$column")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$column")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("withFieldset")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[t._v('"Details"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("FormLayoutFieldset "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$fieldset")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$fieldset")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("withSingleField")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[t._v('"name"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                        "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("withSingleField")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[t._v('"capacity"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v('"Details" is here the legend of the fieldset.')]),t._v(" "),s("h4",{attrs:{id:"lists-of-fields"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#lists-of-fields","aria-hidden":"true"}},[t._v("#")]),t._v(" Lists of fields")]),t._v(" "),s("p",[t._v("In a "),s("code",{staticClass:"inline"},[s("span",{staticClass:"token keyword"},[t._v("List")])]),t._v(" case, which is a form fields container "),s("router-link",{attrs:{to:"/pages/form-fields/list.html"}},[t._v("documented here")]),t._v(", we have to describe the list item layout. It goes like this:")],1),t._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$column")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("withSingleField")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[t._v('"pictures"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("FormLayoutColumn "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$listItem")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$listItem")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("withSingleField")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[t._v('"file"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n             "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("withSingleField")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[t._v('"legend"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("Notice we added a "),s("code",{staticClass:"inline"},[t._v("Closure")]),t._v(" on a "),s("code",{staticClass:"inline"},[s("span",{staticClass:"token function"},[t._v("withSingleField")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token punctuation"},[t._v(")")])]),t._v(' call, meaning we define a "item layout" for this field. The item is made of two fields in this example.')]),t._v(" "),s("h4",{attrs:{id:"tabs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tabs","aria-hidden":"true"}},[t._v("#")]),t._v(" Tabs")]),t._v(" "),s("p",[t._v("Finally, columns can be wrapped in tabs in the form needs to be in parts. This is easy, just wrap the code:")]),t._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$this")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addTab")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[t._v('"tab 1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("FormLayoutTab "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$tab")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$tab")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addColumn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("FormLayoutColumn "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$column")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$column")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("withSingleField")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[t._v('"name"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addTab")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v('The tab will here be labelled "tab1".')]),t._v(" "),s("h3",{attrs:{id:"find-id-array"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#find-id-array","aria-hidden":"true"}},[t._v("#")]),t._v(" "),s("code",{staticClass:"inline"},[s("span",{staticClass:"token function"},[t._v("find")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token variable"},[t._v("$id")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(":")]),t._v(" "),s("span",{staticClass:"token keyword"},[t._v("array")])])]),t._v(" "),s("p",[t._v("Next, we have to write the code responsible for the instance data (in an update case). The method must return a key-value array:")]),t._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("find")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$id")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("array")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[t._v('"name"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[t._v('"USS Enterprise"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[t._v('"capacity"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3000")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("As for the Entity List, you'll want to transform your data before sending it. Transformers are explained in the detailled "),s("router-link",{attrs:{to:"/pages/how-to-transform-data.html"}},[t._v("How to transform data")]),t._v(" documentation.")],1),t._v(" "),s("h3",{attrs:{id:"update-id-array-data"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#update-id-array-data","aria-hidden":"true"}},[t._v("#")]),t._v(" "),s("code",{staticClass:"inline"},[s("span",{staticClass:"token function"},[t._v("update")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token variable"},[t._v("$id")]),s("span",{staticClass:"token punctuation"},[t._v(",")]),t._v(" "),s("span",{staticClass:"token keyword"},[t._v("array")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("$data")]),s("span",{staticClass:"token punctuation"},[t._v(")")])])]),t._v(" "),s("p",[t._v("Well, this is the core: how to write the actual update code.")]),t._v(" "),s("h4",{attrs:{id:"form-field-format"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#form-field-format","aria-hidden":"true"}},[t._v("#")]),t._v(" Form field format")]),t._v(" "),s("p",[t._v("Before going into the details, please note that the "),s("code",{staticClass:"inline"},[s("span",{staticClass:"token variable"},[t._v("$data")])]),t._v(" array contains the per-field formatted data: depending on the type of SharpFormField you used, the structure may change.")]),t._v(" "),s("p",[t._v("For instance, a "),s("code",{staticClass:"inline"},[t._v("SharpFormMarkdownField")]),t._v(" content will be formated as an array with a "),s("code",{staticClass:"inline"},[t._v("text")]),t._v(" attribute for the full text and an optional "),s("code",{staticClass:"inline"},[t._v("fields")]),t._v(" attribute with embedded fields (see the Markdown field documentation for more details).")]),t._v(" "),s("p",[t._v("Sharp will use this format step to perform some tasks: move or copy uploaded files, handle image transformation, ... Note that you can override the formatter of a specific field as explained above in the "),s("code",{staticClass:"inline"},[s("span",{staticClass:"token function"},[t._v("buildFormFields")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token punctuation"},[t._v(")")])]),t._v(" section.")]),t._v(" "),s("p",[t._v("Now let's review two cases:")]),t._v(" "),s("h4",{attrs:{id:"general-case-you-are-on-your-own"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#general-case-you-are-on-your-own","aria-hidden":"true"}},[t._v("#")]),t._v(" General case: you are on your own")]),t._v(" "),s("p",[t._v("If you are not using Eloquent (and maybe no database at all), you'll have to do it manually.")]),t._v(" "),s("p",[t._v("Remember: Sharp aims to be as permissive as possible. So just write the code to update the instance designated by "),s("code",{staticClass:"inline"},[s("span",{staticClass:"token variable"},[t._v("$id")])]),t._v(" with the values in the formatted "),s("code",{staticClass:"inline"},[s("span",{staticClass:"token variable"},[t._v("$data")])]),t._v(" array.")]),t._v(" "),s("h4",{attrs:{id:"eloquent-case-where-the-magic-happens-—-beta"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#eloquent-case-where-the-magic-happens-—-beta","aria-hidden":"true"}},[t._v("#")]),t._v(" Eloquent case (where the magic happens) — beta")]),t._v(" "),s("p",[t._v("Sharp also aims to help the applicative code to be as small as possible, and if you're using Eloquent, you can import a dedicated trait: "),s("code",{staticClass:"inline"},[t._v("Code16\\"),s("span",{staticClass:"token package"},[t._v("Sharp"),s("span",{staticClass:"token punctuation"},[t._v("\\")]),t._v("Form"),s("span",{staticClass:"token punctuation"},[t._v("\\")]),t._v("Eloquent"),s("span",{staticClass:"token punctuation"},[t._v("\\")]),t._v("WithSharpFormEloquentUpdater")])]),t._v(". And then, write this kind of code:")]),t._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("update")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$id")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("array")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$data")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$instance")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$id")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" Spaceship"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("findOrFail")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$id")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Spaceship")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\n    "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$this")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setCustomTransformer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[t._v('"capacity"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$capacity")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$capacity")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ignore")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[t._v('"pilots"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("save")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$instance")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$data")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("We first define a custom transformer (see "),s("router-link",{attrs:{to:"/pages/how-to-transform-data.html"}},[t._v("detailled documentation")]),t._v(").")],1),t._v(" "),s("p",[t._v("Then we decide for some reason to bypass the automatic save process for the "),s("code",{staticClass:"inline"},[t._v("pilots")]),t._v(" attribute — because why not? This "),s("code",{staticClass:"inline"},[s("span",{staticClass:"token function"},[t._v("ignore")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token punctuation"},[t._v(")")])]),t._v(" function can be called with an array as well. You'll probably do whatever is necessary for this field after the "),s("code",{staticClass:"inline"},[s("span",{staticClass:"token function"},[t._v("save")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token punctuation"},[t._v(")")])]),t._v(" call.")]),t._v(" "),s("p",[t._v("Finally we call "),s("code",{staticClass:"inline"},[s("span",{staticClass:"token variable"},[t._v("$this")]),s("span",{staticClass:"token operator"},[t._v("-")]),s("span",{staticClass:"token operator"},[t._v(">")]),s("span",{staticClass:"token function"},[t._v("save")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token punctuation"},[t._v(")")])]),t._v(" with the instance and the sent data. This kind of magical, heavily tested and almost-out-of-beta method will do all the persisting crap for you, handling if needed related models (for lists, tags, selects, ...), with any relation allowed by Eloquent (hasMany, belongsToMany, morphMany, ...).")]),t._v(" "),s("h4",{attrs:{id:"handle-applicative-exceptions"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#handle-applicative-exceptions","aria-hidden":"true"}},[t._v("#")]),t._v(" Handle applicative exceptions")]),t._v(" "),s("p",[t._v("In the "),s("code",{staticClass:"inline"},[s("span",{staticClass:"token function"},[t._v("update")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token variable"},[t._v("$id")]),s("span",{staticClass:"token punctuation"},[t._v(",")]),t._v(" "),s("span",{staticClass:"token keyword"},[t._v("array")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("$data")]),s("span",{staticClass:"token punctuation"},[t._v(")")])]),t._v(" method you may want to throw an exception on a special case, other than validation (which is explain below). Here's how to do that:")]),t._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("update")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$id")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("array")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$data")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$sometingIsWrong")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SharpApplicativeException")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[t._v('"Something is wrong"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("The message will be displayed to the user.")]),t._v(" "),s("h4",{attrs:{id:"return-the-instance-id"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#return-the-instance-id","aria-hidden":"true"}},[t._v("#")]),t._v(" Return the instance id")]),t._v(" "),s("p",[t._v("This is important for some cases (when a field formatter needs to de delayed): this method should return the id of the updated or stored instance.")]),t._v(" "),s("h4",{attrs:{id:"display-notifications"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#display-notifications","aria-hidden":"true"}},[t._v("#")]),t._v(" Display notifications")]),t._v(" "),s("p",[t._v("Sometimes you'll want to display a message to the user, after a creation or an update. Sharp way to do this is to call "),s("code",{staticClass:"inline"},[s("span",{staticClass:"token operator"},[t._v("-")]),s("span",{staticClass:"token operator"},[t._v(">")]),s("span",{staticClass:"token function"},[t._v("notify")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token punctuation"},[t._v(")")])]),t._v(" in the Form code:")]),t._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("update")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$id")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("array")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$data")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$instance")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$id")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" Spaceship"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("findOrFail")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$id")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Spaceship")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$this")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("save")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$instance")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$data")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$this")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("notify")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[t._v('"Spaceship was indeed updated."')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n         "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setDetail")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[t._v('"As you asked."')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n         "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setLevelSuccess")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n         "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setAutoHide")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean constant"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$instance")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("id")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("A notification is made of a title, and optionally")]),t._v(" "),s("ul",[s("li",[t._v("a texte detail,")]),t._v(" "),s("li",[t._v("a notification level: info (the default), warning, danger, success,")]),t._v(" "),s("li",[t._v("an auto-hide policy (if true, the toasted notification will hide after 4s).")])]),t._v(" "),s("p",[t._v("The notification will be displayed on the next screen, which is the Entity List.")]),t._v(" "),s("p",[t._v("Note that you can add up notifications, calling the "),s("code",{staticClass:"inline"},[s("span",{staticClass:"token function"},[t._v("notify")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token punctuation"},[t._v(")")])]),t._v(" function multiple times (which is useful to sometimes add a second notification, based on actual form data).")]),t._v(" "),s("h3",{attrs:{id:"create-array"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#create-array","aria-hidden":"true"}},[t._v("#")]),t._v(" "),s("code",{staticClass:"inline"},[s("span",{staticClass:"token function"},[t._v("create")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(":")]),t._v(" "),s("span",{staticClass:"token keyword"},[t._v("array")])])]),t._v(" "),s("p",[t._v("This method "),s("strong",[t._v("is not mandatory")]),t._v(", a default implementation is proposed by Sharp, but you can override it if necessary. The aim is to return an array version of a new instance (for the creation form). For instance, with Eloquent and the "),s("code",{staticClass:"inline"},[t._v("Code16\\"),s("span",{staticClass:"token package"},[t._v("Sharp"),s("span",{staticClass:"token punctuation"},[t._v("\\")]),t._v("Utils"),s("span",{staticClass:"token punctuation"},[t._v("\\")]),t._v("Transformers"),s("span",{staticClass:"token punctuation"},[t._v("\\")]),t._v("SharpAttributeTransformer")])]),t._v(" trait:")]),t._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("create")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("array")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$this")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("transform")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Spaceship")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[t._v('"name"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[t._v('"new"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"delete-id"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#delete-id","aria-hidden":"true"}},[t._v("#")]),t._v(" "),s("code",{staticClass:"inline"},[s("span",{staticClass:"token function"},[t._v("delete")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token variable"},[t._v("$id")]),s("span",{staticClass:"token punctuation"},[t._v(")")])])]),t._v(" "),s("p",[t._v("Finally (!), here you must write the code performed on a deletion of the instance. It can be anything, here's an Eloquent example:")]),t._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("delete")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$id")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    Spaceship"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("findOrFail")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$id")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("delete")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"configure-the-form"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#configure-the-form","aria-hidden":"true"}},[t._v("#")]),t._v(" Configure the form")]),t._v(" "),s("p",[t._v("Once this class written, we have to declare the form in the sharp config file:")]),t._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// config/sharp.php")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[t._v('"entities"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[t._v('"spaceship"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[t._v('"list"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" \\"),s("span",{pre:!0,attrs:{class:"token package"}},[t._v("App"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Sharp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("SpaceshipSharpList")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[t._v('"form"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" \\"),s("span",{pre:!0,attrs:{class:"token package"}},[t._v("App"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Sharp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("SpaceshipSharpForm")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h2",{attrs:{id:"input-validation"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#input-validation","aria-hidden":"true"}},[t._v("#")]),t._v(" Input validation")]),t._v(" "),s("p",[t._v("Of course you'll want to have an input validation on your form. Simply create a "),s("a",{attrs:{href:"https://laravel.com/docs/5.4/validation#form-request-validation",target:"_blank",rel:"noopener noreferrer"}},[t._v("Laravel Form Request class"),s("OutboundLink")],1),t._v(", and link it in the config:")]),t._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// config/sharp.php")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[t._v('"entities"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[t._v('"spaceship"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[t._v('"list"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" \\"),s("span",{pre:!0,attrs:{class:"token package"}},[t._v("App"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Sharp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("SpaceshipSharpList")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[t._v('"form"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" \\"),s("span",{pre:!0,attrs:{class:"token package"}},[t._v("App"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Sharp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("SpaceshipSharpForm")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[t._v('"validator"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" \\"),s("span",{pre:!0,attrs:{class:"token package"}},[t._v("App"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Sharp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("SpaceshipSharpValidator")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("Sharp will handle the error display in the form.")]),t._v(" "),s("h3",{attrs:{id:"validate-rich-text-fields-markdown-and-wysiwyg"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#validate-rich-text-fields-markdown-and-wysiwyg","aria-hidden":"true"}},[t._v("#")]),t._v(" Validate rich text fields (markdown and wysiwyg)")]),t._v(" "),s("p",[t._v("Rich text fields (RTF) are structured in a certain way by Sharp. This means that a rule like this will not work out of the box, if bio is a RTF:")]),t._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rules")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token single-quoted-string string"}},[t._v("'bio'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token single-quoted-string string"}},[t._v("'required'")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("To make it work, you have two options:")]),t._v(" "),s("p",[t._v('Either add a ".text" suffix to your field key in the rules:')]),t._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rules")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token single-quoted-string string"}},[t._v("'bio.text'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token single-quoted-string string"}},[t._v("'required'")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("Or even easier, make your FormRequest class extend "),s("code",{staticClass:"inline"},[t._v("Code16\\"),s("span",{staticClass:"token package"},[t._v("Sharp"),s("span",{staticClass:"token punctuation"},[t._v("\\")]),t._v("Form"),s("span",{staticClass:"token punctuation"},[t._v("\\")]),t._v("Validator"),s("span",{staticClass:"token punctuation"},[t._v("\\")]),t._v("SharpFormRequest")])]),t._v(" instead of "),s("code",{staticClass:"inline"},[t._v("Illuminate\\"),s("span",{staticClass:"token package"},[t._v("Foundation"),s("span",{staticClass:"token punctuation"},[t._v("\\")]),t._v("Http"),s("span",{staticClass:"token punctuation"},[t._v("\\")]),t._v("FormRequest")])]),t._v(". Note that in this case, if you have to define a "),s("code",{staticClass:"inline"},[s("span",{staticClass:"token function"},[t._v("withValidator")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token variable"},[t._v("$validator")]),s("span",{staticClass:"token punctuation"},[t._v(")")])]),t._v(" function (see the "),s("a",{attrs:{href:"https://laravel.com/docs/5.5/validation#form-request-validation",target:"_blank",rel:"noopener noreferrer"}},[t._v("Laravel doc"),s("OutboundLink")],1),t._v("), make sure you call "),s("code",{staticClass:"inline"},[s("span",{staticClass:"token keyword"},[t._v("parent")]),s("span",{staticClass:"token punctuation"},[t._v(":")]),s("span",{staticClass:"token punctuation"},[t._v(":")]),s("span",{staticClass:"token function"},[t._v("withValidator")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token variable"},[t._v("$validator")]),s("span",{staticClass:"token punctuation"},[t._v(")")])]),t._v(" in it.")])])},[],!1,null,null,null);a.default=e.exports}}]);