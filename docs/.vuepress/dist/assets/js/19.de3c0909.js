(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{219:function(t,a,s){"use strict";s.r(a);var n=s(2),e=Object(n.a)({},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"building-an-entity-list"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#building-an-entity-list","aria-hidden":"true"}},[t._v("#")]),t._v(" Building an Entity List")]),t._v(" "),s("p",[t._v("We need an Entity List to display the list of "),s("code",{staticClass:"inline"},[t._v("instances")]),t._v(" for an "),s("code",{staticClass:"inline"},[t._v("entity")]),t._v(". This list can be paginated, searchable, filtered, ... as we'll see below.")]),t._v(" "),s("h2",{attrs:{id:"generator"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#generator","aria-hidden":"true"}},[t._v("#")]),t._v(" Generator")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("php artisan sharp:make:list "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("class_name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--model"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("model_name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("h2",{attrs:{id:"write-the-class"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#write-the-class","aria-hidden":"true"}},[t._v("#")]),t._v(" Write the class")]),t._v(" "),s("p",[t._v("First let's write the applicative class, and make it extend "),s("code",{staticClass:"inline"},[t._v("Code16\\"),s("span",{staticClass:"token package"},[t._v("Sharp"),s("span",{staticClass:"token punctuation"},[t._v("\\")]),t._v("EntityList"),s("span",{staticClass:"token punctuation"},[t._v("\\")]),t._v("SharpEntityList")])]),t._v(". Therefore there are four abstract methods to implement:")]),t._v(" "),s("ul",[s("li",[s("code",{staticClass:"inline"},[s("span",{staticClass:"token function"},[t._v("buildListDataContainers")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token punctuation"},[t._v(")")])]),t._v(" and "),s("code",{staticClass:"inline"},[s("span",{staticClass:"token function"},[t._v("buildListLayout")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token punctuation"},[t._v(")")])]),t._v(" for the structure,")]),t._v(" "),s("li",[s("code",{staticClass:"inline"},[s("span",{staticClass:"token function"},[t._v("getListData")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),t._v("EntityListQueryParams "),s("span",{staticClass:"token variable"},[t._v("$params")]),s("span",{staticClass:"token punctuation"},[t._v(")")])]),t._v(" for the data,")]),t._v(" "),s("li",[t._v("and "),s("code",{staticClass:"inline"},[s("span",{staticClass:"token function"},[t._v("buildListConfig")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token punctuation"},[t._v(")")])]),t._v(" for... the list config.")])]),t._v(" "),s("p",[t._v("Each one is detailed here:")]),t._v(" "),s("h3",{attrs:{id:"buildlistdatacontainers"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#buildlistdatacontainers","aria-hidden":"true"}},[t._v("#")]),t._v(" "),s("code",{staticClass:"inline"},[s("span",{staticClass:"token function"},[t._v("buildListDataContainers")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token punctuation"},[t._v(")")])])]),t._v(" "),s("p",[t._v('A "data container" is a column in the '),s("code",{staticClass:"inline"},[t._v("Entity "),s("span",{staticClass:"token keyword"},[t._v("List")])]),t._v(", named this way to abstract the presentation. This first function is responsible to describe each column:")]),t._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("buildListDataContainers")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$this")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addDataContainer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        EntityListDataContainer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("make")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[t._v('"name"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setLabel")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[t._v('"Full name"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setSortable")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setHtml")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addDataContainer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("Setting the label, allowing the column to be sortable and to display html is optionnal.")]),t._v(" "),s("h3",{attrs:{id:"buildlistlayout"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#buildlistlayout","aria-hidden":"true"}},[t._v("#")]),t._v(" "),s("code",{staticClass:"inline"},[s("span",{staticClass:"token function"},[t._v("buildListLayout")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token punctuation"},[t._v(")")])])]),t._v(" "),s("p",[t._v("Next step, define how those columns are displayed:")]),t._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("buildListLayout")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$this")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addColumn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[t._v('"picture"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addColumn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[t._v('"name"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addColumnLarge")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[t._v('"capacity"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("We add columns giving:")]),t._v(" "),s("ul",[s("li",[t._v("the column key, which must match those defined in "),s("code",{staticClass:"inline"},[s("span",{staticClass:"token function"},[t._v("buildListDataContainers")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token punctuation"},[t._v(")")])]),t._v(",")]),t._v(" "),s("li",[t._v('the "width" of the column, as an integer on a 12-based grid,')]),t._v(" "),s("li",[t._v("and the 2nd integer in the width on small screen.")])]),t._v(" "),s("p",[t._v("In this example, "),s("code",{staticClass:"inline"},[t._v("picture")]),t._v(" and "),s("code",{staticClass:"inline"},[t._v("name")]),t._v(" will be displayed respectively on 1/12 and 9/12 of the viewport width on large screens, and 2/12 and 10/12 on small screens. The third column, "),s("code",{staticClass:"inline"},[t._v("capacity")]),t._v(", will only be shown on large screens, with a width of 2/12.")]),t._v(" "),s("h3",{attrs:{id:"getlistdata-entitylistqueryparams-params"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#getlistdata-entitylistqueryparams-params","aria-hidden":"true"}},[t._v("#")]),t._v(" "),s("code",{staticClass:"inline"},[s("span",{staticClass:"token function"},[t._v("getListData")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),t._v("EntityListQueryParams "),s("span",{staticClass:"token variable"},[t._v("$params")]),s("span",{staticClass:"token punctuation"},[t._v(")")])])]),t._v(" "),s("p",[t._v("Now the real work: grab and return the actual list data. This method must return an array of "),s("code",{staticClass:"inline"},[t._v("instances")]),t._v(" of our "),s("code",{staticClass:"inline"},[t._v("entity")]),t._v(". You can do this however you want, so let's see a generic example:")]),t._v(" "),s("p",[t._v("The returned array is meant to be build with 2 rules:")]),t._v(" "),s("ul",[s("li",[t._v("each item must define the keys declared in the "),s("code",{staticClass:"inline"},[s("span",{staticClass:"token function"},[t._v("buildDatacontainer")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token punctuation"},[t._v(")")])]),t._v(" function,")]),t._v(" "),s("li",[t._v("plus one attribute for the identifier, which is "),s("code",{staticClass:"inline"},[t._v("id")]),t._v(" by default (more on that later).")])]),t._v(" "),s("p",[t._v("So for instance, if we defined 2 columns "),s("code",{staticClass:"inline"},[t._v("name")]),t._v(" and "),s("code",{staticClass:"inline"},[t._v("capacity")]),t._v(":")]),t._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getListData")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("EntityListQueryParams "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$params")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[t._v('"id"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[t._v('"name"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[t._v('"USS Enterprise"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[t._v('"capacity"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[t._v('"10k"')]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[t._v('"id"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[t._v('"name"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[t._v('"USS Agamemnon"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[t._v('"capacity"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[t._v('"20k"')]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("Of course, real code would imply some data request in a DB, or a file for instance; the important thing is that Sharp don't care.")]),t._v(" "),s("h4",{attrs:{id:"transformers"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#transformers","aria-hidden":"true"}},[t._v("#")]),t._v(" Transformers")]),t._v(" "),s("p",[t._v("In a more realistic project, you'll want to transform your data before sending it to the front code. Sharp can help with that, as explained in the detailled "),s("router-link",{attrs:{to:"/guide/how-to-transform-data.html"}},[t._v("How to transform data")]),t._v(" documentation.")],1),t._v(" "),s("h4",{attrs:{id:"handle-query-params"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#handle-query-params","aria-hidden":"true"}},[t._v("#")]),t._v(" Handle query params")]),t._v(" "),s("p",[t._v("As you may have noticed, "),s("code",{staticClass:"inline"},[s("span",{staticClass:"token function"},[t._v("getListData")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token punctuation"},[t._v(")")])]),t._v(" accepts as an argument a "),s("code",{staticClass:"inline"},[t._v("EntityListQueryParams")]),t._v(" instance. This object will be filled by Sharp with query params:")]),t._v(" "),s("ul",[s("li",[t._v("sorting: "),s("code",{staticClass:"inline"},[s("span",{staticClass:"token variable"},[t._v("$params")]),s("span",{staticClass:"token operator"},[t._v("-")]),s("span",{staticClass:"token operator"},[t._v(">")]),s("span",{staticClass:"token function"},[t._v("sortedBy")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token punctuation"},[t._v(")")])]),t._v(" and "),s("code",{staticClass:"inline"},[s("span",{staticClass:"token variable"},[t._v("$params")]),s("span",{staticClass:"token operator"},[t._v("-")]),s("span",{staticClass:"token operator"},[t._v(">")]),s("span",{staticClass:"token function"},[t._v("sortedDir")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token punctuation"},[t._v(")")])])]),t._v(" "),s("li",[t._v("search: "),s("code",{staticClass:"inline"},[s("span",{staticClass:"token variable"},[t._v("$params")]),s("span",{staticClass:"token operator"},[t._v("-")]),s("span",{staticClass:"token operator"},[t._v(">")]),s("span",{staticClass:"token function"},[t._v("hasSearch")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token punctuation"},[t._v(")")])]),t._v(" and "),s("code",{staticClass:"inline"},[s("span",{staticClass:"token variable"},[t._v("$params")]),s("span",{staticClass:"token operator"},[t._v("-")]),s("span",{staticClass:"token operator"},[t._v(">")]),s("span",{staticClass:"token function"},[t._v("searchWords")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token punctuation"},[t._v(")")])])]),t._v(" "),s("li",[t._v("filters: "),s("code",{staticClass:"inline"},[s("span",{staticClass:"token variable"},[t._v("$params")]),s("span",{staticClass:"token operator"},[t._v("-")]),s("span",{staticClass:"token operator"},[t._v(">")]),s("span",{staticClass:"token function"},[t._v("filterFor")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token variable"},[t._v("$filter")]),s("span",{staticClass:"token punctuation"},[t._v(")")])])])]),t._v(" "),s("p",[t._v("If the Entity List was configured to handle sort, filters or search (see below to learn how), and if the user performed such an action, values will be accessible here.")]),t._v(" "),s("h5",{attrs:{id:"sort"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sort","aria-hidden":"true"}},[t._v("#")]),t._v(" Sort")]),t._v(" "),s("p",[s("code",{staticClass:"inline"},[s("span",{staticClass:"token variable"},[t._v("$params")]),s("span",{staticClass:"token operator"},[t._v("-")]),s("span",{staticClass:"token operator"},[t._v(">")]),s("span",{staticClass:"token function"},[t._v("sortedBy")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token punctuation"},[t._v(")")])]),t._v(" contains the name of the attribute, and "),s("code",{staticClass:"inline"},[s("span",{staticClass:"token variable"},[t._v("$params")]),s("span",{staticClass:"token operator"},[t._v("-")]),s("span",{staticClass:"token operator"},[t._v(">")]),s("span",{staticClass:"token function"},[t._v("sortedDir")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token punctuation"},[t._v(")")])]),t._v(" the direction: "),s("code",{staticClass:"inline"},[t._v("asc")]),t._v(" or "),s("code",{staticClass:"inline"},[t._v("desc")]),t._v(".")]),t._v(" "),s("p",[t._v("Note that the ability of sorting a column is defined in "),s("code",{staticClass:"inline"},[s("span",{staticClass:"token function"},[t._v("buildListDataContainers")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token punctuation"},[t._v(")")])]),t._v(".")]),t._v(" "),s("h5",{attrs:{id:"search"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#search","aria-hidden":"true"}},[t._v("#")]),t._v(" Search")]),t._v(" "),s("p",[s("code",{staticClass:"inline"},[s("span",{staticClass:"token variable"},[t._v("$params")]),s("span",{staticClass:"token operator"},[t._v("-")]),s("span",{staticClass:"token operator"},[t._v(">")]),s("span",{staticClass:"token function"},[t._v("hasSearch")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token punctuation"},[t._v(")")])]),t._v(" returns true if the user entered a search, and "),s("code",{staticClass:"inline"},[s("span",{staticClass:"token variable"},[t._v("$params")]),s("span",{staticClass:"token operator"},[t._v("-")]),s("span",{staticClass:"token operator"},[t._v(">")]),s("span",{staticClass:"token function"},[t._v("searchWords")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token punctuation"},[t._v(")")])]),t._v(" returns an array of search terms. This last method can take parameters, here's its full signature:")]),t._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("searchWords")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$isLike")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean constant"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$handleStar")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean constant"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$noStarTermPrefix")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token single-quoted-string string"}},[t._v("'%'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$noStarTermSuffix")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token single-quoted-string string"}},[t._v("'%'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("ul",[s("li",[s("code",{staticClass:"inline"},[s("span",{staticClass:"token variable"},[t._v("$isLike")])]),t._v(": if true, each term will be surrounded by "),s("code",{staticClass:"inline"},[s("span",{staticClass:"token operator"},[t._v("%")])]),t._v(" (by default).")]),t._v(" "),s("li",[s("code",{staticClass:"inline"},[s("span",{staticClass:"token variable"},[t._v("$handleStar")])]),t._v(": if true, and if a char "),s("code",{staticClass:"inline"},[s("span",{staticClass:"token operator"},[t._v("*")])]),t._v(" is found in a term, it will be replaced by "),s("code",{staticClass:"inline"},[s("span",{staticClass:"token operator"},[t._v("%")])]),t._v(" (default), and this term won't be surrounded by "),s("code",{staticClass:"inline"},[s("span",{staticClass:"token operator"},[t._v("%")])]),t._v(' (to allow "starts with" or "ends with" searches).')]),t._v(" "),s("li",[s("code",{staticClass:"inline"},[s("span",{staticClass:"token variable"},[t._v("$noStarTermPrefix")])]),t._v(" and "),s("code",{staticClass:"inline"},[s("span",{staticClass:"token variable"},[t._v("$noStarTermSuffix")])]),t._v(": the char to use in a "),s("code",{staticClass:"inline"},[s("span",{staticClass:"token variable"},[t._v("$isLike")])]),t._v(" case.")])]),t._v(" "),s("p",[t._v("Here's a code sample with an Eloquent Model:")]),t._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$params")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("hasSearch")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("foreach")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$params")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("searchWords")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$word")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$spaceships")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("where")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$query")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$word")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$query")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("orWhere")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token single-quoted-string string"}},[t._v("'name'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token single-quoted-string string"}},[t._v("'like'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$word")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("orWhere")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token single-quoted-string string"}},[t._v("'pilots.name'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token single-quoted-string string"}},[t._v("'like'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$word")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h5",{attrs:{id:"filters"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#filters","aria-hidden":"true"}},[t._v("#")]),t._v(" Filters")]),t._v(" "),s("p",[t._v("We haven't see yet how we can build a "),s("code",{staticClass:"inline"},[t._v("Filter")]),t._v(", but at this stage, a filter is a "),s("code",{staticClass:"inline"},[t._v("key")]),t._v(" and a "),s("code",{staticClass:"inline"},[t._v("value")]),t._v(". So we can grab this calling "),s("code",{staticClass:"inline"},[s("span",{staticClass:"token variable"},[t._v("$filterValue")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("$params")]),s("span",{staticClass:"token operator"},[t._v("-")]),s("span",{staticClass:"token operator"},[t._v(">")]),s("span",{staticClass:"token function"},[t._v("filterFor")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token variable"},[t._v("$filterKey")]),s("span",{staticClass:"token punctuation"},[t._v(")")])]),t._v(", and use the value in our query code.")]),t._v(" "),s("h4",{attrs:{id:"pagination"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#pagination","aria-hidden":"true"}},[t._v("#")]),t._v(" Pagination")]),t._v(" "),s("p",[t._v("It's very common to return in "),s("code",{staticClass:"inline"},[s("span",{staticClass:"token function"},[t._v("getListData")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token punctuation"},[t._v(")")])]),t._v(" paginated results:  return a "),s("code",{staticClass:"inline"},[t._v("Illuminate\\"),s("span",{staticClass:"token package"},[t._v("Contracts"),s("span",{staticClass:"token punctuation"},[t._v("\\")]),t._v("Pagination"),s("span",{staticClass:"token punctuation"},[t._v("\\")]),t._v("LengthAwarePaginator")])]),t._v(" in this case.")]),t._v(" "),s("p",[t._v("With "),s("code",{staticClass:"inline"},[t._v("Eloquent")]),t._v(" or the "),s("code",{staticClass:"inline"},[t._v("QueryBuilder")]),t._v(", this means calling "),s("code",{staticClass:"inline"},[s("span",{staticClass:"token operator"},[t._v("-")]),s("span",{staticClass:"token operator"},[t._v(">")]),s("span",{staticClass:"token function"},[t._v("paginate")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token variable"},[t._v("$count")]),s("span",{staticClass:"token punctuation"},[t._v(")")])]),t._v(" on the query.")]),t._v(" "),s("h3",{attrs:{id:"buildlistconfig"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#buildlistconfig","aria-hidden":"true"}},[t._v("#")]),t._v(" "),s("code",{staticClass:"inline"},[s("span",{staticClass:"token function"},[t._v("buildListConfig")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token punctuation"},[t._v(")")])])]),t._v(" "),s("p",[t._v("Finally, this last function must describe... the list config. Let's see an example:")]),t._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("buildListConfig")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$this")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setInstanceIdAttribute")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[t._v('"id"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setSearchable")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setDefaultSort")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[t._v('"name"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[t._v('"asc"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setPaginated")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("Here we declare that:")]),t._v(" "),s("ul",[s("li",[t._v("each item of our list is identified by an attribute "),s("code",{staticClass:"inline"},[t._v("id")]),t._v(" (this is the default value);")]),t._v(" "),s("li",[t._v("the list is meant to allow search to the user, meaning Sharp will display a search text input and process its content to fill the "),s("code",{staticClass:"inline"},[t._v("EntityListQueryParams")]),t._v(" instance (see above);")]),t._v(" "),s("li",[t._v('the list must be sorted by "name", meaning that the '),s("code",{staticClass:"inline"},[t._v("EntityListQueryParams")]),t._v(" instance will be filled with this default value;")]),t._v(" "),s("li",[t._v("and finally, the list is paginated, meaning that "),s("code",{staticClass:"inline"},[s("span",{staticClass:"token function"},[t._v("getListData")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),t._v("EntityListQueryParams "),s("span",{staticClass:"token variable"},[t._v("$params")]),s("span",{staticClass:"token punctuation"},[t._v(")")])]),t._v(" must return an instance of "),s("code",{staticClass:"inline"},[t._v("LengthAwarePaginator")]),t._v(" (see above) and that Sharp will display pagination links if needed.")])]),t._v(" "),s("p",[t._v("This config can also contain things related to Filters, Commands or State, and all of this is discussed on following chapters.")]),t._v(" "),s("h2",{attrs:{id:"configure-the-entity"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#configure-the-entity","aria-hidden":"true"}},[t._v("#")]),t._v(" Configure the entity")]),t._v(" "),s("p",[t._v("In the sharp config file, we have to declare our entity, and link it to the Entity List class:")]),t._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// config/sharp.php")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[t._v('"entities"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[t._v('"spaceship"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[t._v('"list"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" \\"),s("span",{pre:!0,attrs:{class:"token package"}},[t._v("App"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Sharp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("SpaceshipSharpList")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("Then we can access the Entity List at the following URL:\n"),s("strong",[t._v("/sharp/list/spaceship")]),t._v(' (replace "spaceship" by our entity key).')]),t._v(" "),s("p",[t._v("To go ahead and learn how to add a link in the Sharp side menu, "),s("router-link",{attrs:{to:"/guide/building-menu.html"}},[t._v("look here")]),t._v(".")],1)])},[],!1,null,null,null);a.default=e.exports}}]);