html,
body {
  height: 100%;
}

html,
body,
div,
span,
applet,
object,
iframe,
h1,
h2,
h3,
h4,
h5,
h6,
p,
blockquote,
pre,
a,
abbr,
acronym,
address,
big,
cite,
code,
del,
dfn,
em,
img,
ins,
kbd,
q,
s,
samp,
small,
strike,
strong,
sub,
sup,
tt,
var,
b,
u,
i,
center,
dl,
dt,
dd,
ol,
ul,
li,
fieldset,
form,
label,
legend,
table,
caption,
tbody,
tfoot,
thead,
tr,
th,
td,
article,
aside,
canvas,
details,
embed,
figure,
figcaption,
footer,
header,
hgroup,
menu,
nav,
output,
ruby,
section,
summary,
time,
mark,
audio,
video {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline;
}

/* HTML5 display-role reset for older browsers */

article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
menu,
nav,
section {
  display: block;
}

body {
  line-height: 1;
}

ol,
ul {
  list-style: none;
}

blockquote,
q {
  quotes: none;
}

blockquote:before,
blockquote:after,
q:before,
q:after {
  content: '';
  content: none;
}

table {
  border-collapse: collapse;
  border-spacing: 0;
}

* {
  box-sizing: border-box;
}

.bx--type-giga {
  font-size: 4.625rem;
  line-height: 1.25;
  font-weight: 300;
}

.bx--type-mega {
  font-size: 3.25rem;
  line-height: 1.25;
  font-weight: 300;
}

.bx--type-omega {
  font-size: 0.75rem;
  line-height: 1.25;
  letter-spacing: .5px;
  font-weight: 700;
  text-transform: uppercase;
}

.bx--type-caption {
  font-size: 0.75rem;
  line-height: 1.5;
}

.bx--type-legal {
  font-size: 0.6875rem;
  line-height: 1.5;
}

.bx--type-caps {
  text-transform: uppercase;
}

strong,
.bx--type-strong {
  font-weight: 700;
}

p {
  font-size: 1rem;
  line-height: 1.5;
}

em {
  font-style: italic;
}

a {
  color: #3d70b2;
}

h1,
.bx--type-alpha {
  font-size: 2rem;
  line-height: 1.25;
  letter-spacing: .5px;
}

h2,
.bx--type-beta {
  font-size: 1.625rem;
  line-height: 1.25;
  letter-spacing: .5px;
}

h3,
.bx--type-gamma {
  font-size: 1.25rem;
  line-height: 1.25;
  letter-spacing: .5px;
}

h4,
.bx--type-delta {
  font-size: 1.125rem;
  line-height: 1.25;
}

h5,
.bx--type-epsilon {
  font-size: 1rem;
  line-height: 1.25;
}

h6,
.bx--type-zeta {
  font-size: 0.875rem;
  line-height: 1.25;
}

body {
  background-color: #EBF0F7;
}

.Sharp__login-page {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  height: 100%;
}

@media (max-width: 575px) {
  .Sharp__login-page .container {
    width: 100%;
  }
}

.Sharp__form-page {
  min-height: 100%;
}

/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */